draw_image("./champ/Camille.png", x = 4.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Jhin.png", x = 5.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Senna.png", x = 6.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Thresh.png", x = 7.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Bard.png", x = 8.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Yone.png", x = 9.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Ezreal.png", x = 10.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Caitlyn.png", x = 11.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Khazix.png", x = 12.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Lucian.png", x = 13.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Nidalee.png", x = 14.5, y = 0.2, scale = 0.8)
ggdraw(insert_xaxis_grob(g, ximg, position = "bottom"))
FULLSUPPORT <- data.frame(SUPPORT %>%
full_join(loldataset2, by = "key"))
FULLADCARRY <- data.frame(ADCARRY  %>%
full_join(loldataset2, by = "key"))
FULLMIDLANER <- data.frame(MIDLANER  %>%
full_join(loldataset2, by = "key"))
FULLJUNGLER <- data.frame(JUNGLER  %>%
full_join(loldataset2, by = "key"))
FULLTOPLANER <- data.frame(TOPLANER  %>%
full_join(loldataset2, by = "key"))
FULLSUPPORT <- FULLSUPPORT %>%
select (key, support, name, image.full, info.difficulty)
FULLADCARRY <- FULLADCARRY %>%
select (key, adcarry, name, image.full, info.difficulty)
FULLMIDLANER <- FULLMIDLANER %>%
select (key, midlaner, name, image.full, info.difficulty)
FULLJUNGLER <- FULLJUNGLER %>%
select (key, jungler, name, image.full, info.difficulty)
FULLTOPLANER <- FULLTOPLANER %>%
select (key, toplaner, name, image.full, info.difficulty)
COMPLETE <- data.frame(FULLSUPPORT %>%
full_join(FULLADCARRY, by=c("key", "image.full", "name", "info.difficulty")))
COMPLETE <- data.frame(COMPLETE %>%
full_join(FULLTOPLANER, by=c("key", "image.full","name", "info.difficulty")))
COMPLETE <- data.frame(COMPLETE %>%
full_join(FULLMIDLANER, by=c("key", "image.full","name", "info.difficulty")))
COMPLETE <- data.frame(COMPLETE %>%
full_join(FULLJUNGLER, by=c("key", "image.full","name", "info.difficulty")))
COMPLETE$NUM <- as.numeric(row.names(COMPLETE)) #funzione che assegna un numero alla riga (come utilizzare indice dataset come dato a se stante)
COMPLETE <- COMPLETE[,c(10,1,3,4,5,2,6,7,8,9)]
COMPLETE <- COMPLETE %>% mutate_all(~replace(., is.na(.), 0))
COMPLETE <- data.frame(COMPLETE %>%
mutate(Totali = support + adcarry + midlaner + jungler + toplaner))
COMPLETE <- COMPLETE %>%
filter(Totali >= 2345)
COMPLETE$NUM <- as.numeric(row.names(COMPLETE)) #Richiama funzione per errore in ggplot successivo
g = ggplot(data = COMPLETE)+
geom_col(mapping = aes( y = Totali, x = NUM, fill = "#ffa600", color = "grey33"))+
theme(axis.title.x=element_blank(), #tre funzioni per eliminare titolo, segni e testo dalla linea delle ascisse (per inserimento immagini successivo)
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
)+
labs(
title="Campioni più Utilizzati",
y="Numero di Utilizzi Totali"
)+
scale_fill_identity(aesthetics="colour")+
scale_fill_identity(aesthetics="fill")+
annotate("text", x=1, y=1000, angle=90, label="Ashe")+
annotate("text", x=1, y=1550, angle=90, label="2984")+
annotate("text", x=2, y=1000, angle=90, label="Akali")+
annotate("text", x=2, y=1550, angle=90, label="2607")+
annotate("text", x=3, y=1000, angle=90, label="Lux")+
annotate("text", x=3, y=1550, angle=90, label="2634")+
annotate("text", x=4, y=1000, angle=90, label="Graves")+
annotate("text", x=4, y=1550, angle=90, label="2447")+
annotate("text", x=5, y=1000, angle=90, label="Camille")+
annotate("text", x=5, y=1550, angle=90, label="3080")+
annotate("text", x=6, y=1000, angle=90, label="Jhin")+
annotate("text", x=6, y=1550, angle=90, label="3292")+
annotate("text", x=7, y=1000, angle=90, label="Senna")+
annotate("text", x=7, y=1550, angle=90, label="2831")+
annotate("text", x=8, y=1000, angle=90, label="Thresh")+
annotate("text", x=8, y=1550, angle=90, label="3117")+
annotate("text", x=9, y=1000, angle=90, label="Bard")+
annotate("text", x=9, y=1550, angle=90, label="2570")+
annotate("text", x=10, y=1000, angle=90, label="Yone")+
annotate("text", x=10, y=1550, angle=90, label="2543")+
annotate("text", x=11, y=1000, angle=90, label="Ezreal")+
annotate("text", x=11, y=1550, angle=90, label="4109")+
annotate("text", x=12, y=1000, angle=90, label="Caitlyn")+
annotate("text", x=12, y=1550, angle=90, label="4036")+
annotate("text", x=13, y=1000, angle=90, label="Kha'Zix")+
annotate("text", x=13, y=1550, angle=90, label="2345")+
annotate("text", x=14, y=1000, angle=90, label="Lucian")+
annotate("text", x=14, y=1550, angle=90, label="3383")+
annotate("text", x=15, y=1000, angle=90, label="Nidalee")+
annotate("text", x=15, y=1550, angle=90, label="2520")
ximg <- axis_canvas(g, axis = 'x') +
draw_image("./champ/Ashe.png", x = 0.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Akali.png", x = 1.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Lux.png", x = 2.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Graves.png", x = 3.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Camille.png", x = 4.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Jhin.png", x = 5.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Senna.png", x = 6.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Thresh.png", x = 7.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Bard.png", x = 8.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Yone.png", x = 9.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Ezreal.png", x = 10.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Caitlyn.png", x = 11.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Khazix.png", x = 12.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Lucian.png", x = 13.5, y = 0.2, scale = 0.8) +
draw_image("./champ/Nidalee.png", x = 14.5, y = 0.2, scale = 0.8)
ggdraw(insert_xaxis_grob(g, ximg, position = "bottom"))
loldataset <- loldataset %>%
mutate (Minutes = gameDuration / 60)
#Gold Totale team 1 (BLU)
loldataset <- loldataset %>%
mutate (goldteam1 = t1p1_goldEarned + t1p2_goldEarned + t1p3_goldEarned + t1p4_goldEarned + t1p5_goldEarned)
#Gold Totale team 2 (RED)
loldataset <- loldataset %>%
mutate (goldteam2 = t2p1_goldEarned + t2p2_goldEarned + t2p3_goldEarned + t2p4_goldEarned + t2p5_goldEarned)
#Average Gold team 1 (BLU): Quanto gold è stato guadagnato al minuto da tutti e 5 i componenti del team
loldataset <- loldataset %>%
mutate (avg_goldteam1= goldteam1 / Minutes)
#Average Gold team 2 (RED)
loldataset <- loldataset %>%
mutate (avg_goldteam2= goldteam2 / Minutes)
#------------------------------------------------
#Grafico avg_gold/avg_lp squadra blu: la parte blu attorno è l'intervallo di confidenza, posizione dove potrebbe essere possibile trovare valori
ggplot(data = loldataset)+
geom_smooth(mapping = aes(x = average_lp, y = avg_goldteam1, colour="black", fill="grey33"))+
labs(
title="Media dell'oro guadagnato in rapporto alla media dei League Points",
subtitle = "Squadra Blu",
x = "Media dei League Points della partita",
y = "Media dell' oro guadagnato"
) +
scale_fill_identity(aesthetics="colour")+ #funzione che rende color/fill un parametro prettamente stilistico e non legato ai dati
scale_fill_identity(aesthetics="fill" )+
theme(                                    #funzione che permette di personalizzare il grafico (linee, fill, font)
panel.background = element_rect(fill = "skyblue2",
colour = "skyblue2",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
text=element_text(size=10,  family="Helvetica")
)
ggplot(data = loldataset)+
geom_smooth(mapping = aes(x = average_lp, y = avg_goldteam2, colour="black", fill="grey33" ))+
labs(
title="Media dell'oro guadagnato in rapporto alla media dei League Points",
subtitle = "Squadra Rossa",
x = "Media dei League Points della partita",
y = "Media dell' oro guadagnato"
) +
scale_fill_identity(aesthetics="colour")+
scale_fill_identity(aesthetics="fill")+
theme(
panel.background = element_rect(fill = "#F17D7D",
colour = "#F17D7D",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
text=element_text(size=10,  family="Helvetica")
)
#grafico rosso inferiore, meno cs, meno strutture?
#------------------------------------------------
#Grafico avg_kills/avg_lp squadra rossa
loldataset <- loldataset %>%
mutate (killteam1 = t1p1_kills + t1p2_kills + t1p3_kills + t1p4_kills + t1p5_kills)
loldataset <- loldataset %>%
mutate (killteam2 = t2p1_kills + t2p2_kills + t2p3_kills + t2p4_kills + t2p5_kills)
loldataset <- loldataset %>%
mutate (deathteam1 = t1p1_deaths + t1p2_deaths + t1p3_deaths + t1p4_deaths + t1p5_deaths)
loldataset <- loldataset %>%
mutate (deathteam2 = t2p1_deaths + t2p2_deaths + t2p3_deaths + t2p4_deaths + t2p5_deaths)
loldataset <- loldataset %>%
mutate (Kd_Ratio_1 = killteam1 / deathteam1)
loldataset <- loldataset %>%
mutate (Kd_Ratio_2 = killteam2 / deathteam2)
ggplot(data = loldataset)+
geom_smooth(mapping = aes(x = average_lp, y = killteam1, colour="black", fill="blue" ))+
labs(
title="Uccisioni in rapporto ai League Points",
subtitle = "Squadra Blu",
x = "Media dei League Points della partita",
y = "Uccisioni della Squadra"
) +
scale_fill_identity(aesthetics="colour")+
scale_fill_identity(aesthetics="fill")+
theme(
panel.background = element_rect(fill = "skyblue2",
colour = "skyblue2",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
text=element_text(size=10,  family="Helvetica")
)
ggplot(data = loldataset)+
geom_smooth(mapping = aes(x = average_lp, y = killteam2, colour="black", fill="red" ))+
labs(
title="Uccisioni in rapporto ai League Points",
subtitle = "Squadra Rossa",
x = "Media dei League Points della partita",
y = "Uccisioni della Squadra"
) +
scale_fill_identity(aesthetics="colour")+
scale_fill_identity(aesthetics="fill")+
theme(
panel.background = element_rect(fill = "#F17D7D",
colour = "#F17D7D",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
text=element_text(size=10,  family="Helvetica")
)
#Grafico rosso superiore, più aggressività.
#------------------------------------------------
#Grafico avg_assists/avg_lp squadra rossa
loldataset <- loldataset %>%
mutate (assistteam1 = t1p1_assists + t1p2_assists + t1p3_assists + t1p4_assists + t1p5_assists)
loldataset <- loldataset %>%
mutate (assistteam2 = t2p1_assists + t2p2_assists + t2p3_assists + t2p4_assists + t2p5_assists)
ggplot(data = loldataset)+
geom_smooth(mapping = aes(x = average_lp, y = assistteam1, colour="black", fill="blue" ))+
labs(
title="Assist in rapporto ai League Points",
subtitle = "Squadra Blu",
x = "Media dei League Points della partita",
y = "Assist della squadra"
) +
scale_fill_identity(aesthetics="colour")+
scale_fill_identity(aesthetics="fill")+
theme(
panel.background = element_rect(fill = "skyblue2",
colour = "skyblue2",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
text=element_text(size=10,  family="Helvetica")
)
ggplot(data = loldataset)+
geom_smooth(mapping = aes(x = average_lp, y = assistteam2, colour="black", fill="red" ))+
labs(
title="Assist in rapporto ai League Points",
subtitle = "Squadra Rossa",
x = "Media dei League Points della partita",
y = "Assist della squadra"
) +
scale_fill_identity(aesthetics="colour")+
scale_fill_identity(aesthetics="fill")+
theme(
panel.background = element_rect(fill = "#F17D7D",
colour = "#F17D7D",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
text=element_text(size=10,  family="Helvetica")
)
#Grafico blu superiore, più teamwork e più
#------------------------------------------------
#Grafico avg_visionscore/avg_lp squadra blu
loldataset <- loldataset %>%
mutate (Visionscore1 = t1p1_visionScore + t1p2_visionScore + t1p3_visionScore + t1p4_visionScore + t1p5_visionScore)
loldataset <- loldataset %>%
mutate (Visionscore2 = t2p1_visionScore + t2p2_visionScore + t2p3_visionScore + t2p4_visionScore + t2p5_visionScore)
ggplot(data = loldataset)+
geom_smooth(mapping = aes(x = average_lp, y = Visionscore1, colour="black", fill="blue" ))+
labs(
title="Punti visione in rapporto ai League Points",
subtitle = "Squadra Blu",
x = "Media dei League Points della partita",
y = "Punteggio visione della squadra"
) +
scale_fill_identity(aesthetics="colour")+
scale_fill_identity(aesthetics="fill")+
theme(
panel.background = element_rect(fill = "skyblue2",
colour = "skyblue2",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
text=element_text(size=10,  family="Helvetica")
)
ggplot(data = loldataset)+
geom_smooth(mapping = aes(x = average_lp, y = Visionscore2, colour="black", fill="red" ))+
labs(
title="Punti visione in rapporto ai League Points",
subtitle = "Squadra Rossa",
x = "Media dei League Points della partita",
y = "Punteggio visione della squadra"
) +
scale_fill_identity(aesthetics="colour")+
scale_fill_identity(aesthetics="fill")+
theme(
panel.background = element_rect(fill = "#F17D7D",
colour = "#F17D7D",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
text=element_text(size=10,  family="Helvetica")
)
#grafico blu superiore, più ward piazzate e in posti migliori
#------------------------------------------------
#danni alle torri
loldataset <- loldataset %>%
mutate (Turretd1 = t1p1_damageDealtToTurrets + t1p2_damageDealtToTurrets + t1p3_damageDealtToTurrets + t1p4_damageDealtToTurrets + t1p5_damageDealtToTurrets)
loldataset <- loldataset %>%
mutate (Turretd2 = t2p1_damageDealtToTurrets + t2p2_damageDealtToTurrets + t2p3_damageDealtToTurrets + t2p4_damageDealtToTurrets + t2p5_damageDealtToTurrets)
ggplot(data = loldataset)+
geom_smooth(mapping = aes(x = average_lp, y = Turretd1, colour="black", fill="blue" ))+
labs(
title="Danni alle torri",
subtitle = "Squadra Blu",
x = "Media dei League Points della partita",
y = "Danni alle torri"
) +
scale_fill_identity(aesthetics="colour")+
scale_fill_identity(aesthetics="fill")+
theme(
panel.background = element_rect(fill = "skyblue2",
colour = "skyblue2",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
text=element_text(size=10,  family="Helvetica")
)
ggplot(data = loldataset)+
geom_smooth(mapping = aes(x = average_lp, y = Turretd2, colour="black", fill="red" ))+
labs(
title="Danni alle torri",
subtitle = "Squadra Rossa",
x = "Media dei League Points della partita",
y = "Danni alle torri"
) +
scale_fill_identity(aesthetics="colour")+
scale_fill_identity(aesthetics="fill")+
theme(
panel.background = element_rect(fill = "#F17D7D",
colour = "#F17D7D",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
text=element_text(size=10,  family="Helvetica")
)
#grafico  superiore, più
#------------------------------------------------
#Grafico percentuali vittorie
VITTORIE <- data.frame(loldataset %>%
select(t1_win))
VITTORIE <- VITTORIE %>%
mutate(tot=as.numeric(row.names(VITTORIE)))
VITTORIE <- VITTORIE %>%
mutate(Vittorie=sum(t1_win))
VITTORIE <- VITTORIE %>%
filter(tot==14109)
VITTORIE <- VITTORIE %>%
add_row(t1_win = 1, tot= 14109, Vittorie=tot-7141)
VITTORIE <- VITTORIE %>%
mutate(percentuale= Vittorie/tot*100)
VITTORIE <- VITTORIE %>%
mutate(tot=as.numeric(row.names(VITTORIE)))
vtr <- VITTORIE %>%
ggplot(aes(x = tot, y = Vittorie, fill=c(high="skyblue2", low="#F17D7D"), width=0.95, height =2, text = paste("Vittorie:", Vittorie, "<br>","Percentuale:", percentuale, "%")))+  #factor(data) per permettere di inserire colori manualmente)
geom_col()+
theme(axis.title.x=element_blank(), #tre funzioni per eliminare titolo, segni e testo dalla linea delle ascisse (per inserimento immagini successivo)
axis.text.x =element_blank(),
axis.ticks.x=element_blank(),
)+
labs(
title="Numero di vittorie"
)+
scale_x_continuous(expand=c(0,0.75)) +
theme(
panel.grid.major = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
text=element_text(size=10,  family="Helvetica"),
legend.position = "none",
)
ggplotly(vtr, tooltip=("text"))
ggplot(data = loldataset)+
geom_smooth(mapping = aes(x = average_lp, y = avg_goldteam1, colour="black", fill="grey33"))+
labs(
title="Media dell'oro guadagnato in rapporto alla media dei League Points",
subtitle = "Squadra Blu",
x = "Media dei League Points della partita",
y = "Media dell' oro guadagnato"
) +
scale_fill_identity(aesthetics="colour")+ #funzione che rende color/fill un parametro prettamente stilistico e non legato ai dati
scale_fill_identity(aesthetics="fill" )+
theme(                                    #funzione che permette di personalizzare il grafico (linee, fill, font)
panel.background = element_rect(fill = "skyblue2",
colour = "skyblue2",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
text=element_text(size=10,  family="Helvetica")
)
ggplot(data = loldataset)+
geom_smooth(mapping = aes(x = average_lp, y = avg_goldteam2, colour="black", fill="grey33" ))+
labs(
title="Media dell'oro guadagnato in rapporto alla media dei League Points",
subtitle = "Squadra Rossa",
x = "Media dei League Points della partita",
y = "Media dell' oro guadagnato"
) +
scale_fill_identity(aesthetics="colour")+
scale_fill_identity(aesthetics="fill")+
theme(
panel.background = element_rect(fill = "#F17D7D",
colour = "#F17D7D",
size = 0.5, linetype = "solid"),
panel.grid.major = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
text=element_text(size=10,  family="Helvetica")
)
loldataset <- loldataset %>%
mutate (killteam1 = t1p1_kills + t1p2_kills + t1p3_kills + t1p4_kills + t1p5_kills)
loldataset <- loldataset %>%
mutate (killteam2 = t2p1_kills + t2p2_kills + t2p3_kills + t2p4_kills + t2p5_kills)
VITTORIE <- data.frame(loldataset %>%
select(t1_win))
VITTORIE <- VITTORIE %>%
mutate(tot=as.numeric(row.names(VITTORIE)))
VITTORIE <- VITTORIE %>%
mutate(Vittorie=sum(t1_win))
VITTORIE <- VITTORIE %>%
filter(tot==14109)
VITTORIE <- VITTORIE %>%
add_row(t1_win = 1, tot= 14109, Vittorie=tot-7141)
VITTORIE <- VITTORIE %>%
mutate(percentuale= Vittorie/tot*100)
VITTORIE <- VITTORIE %>%
mutate(tot=as.numeric(row.names(VITTORIE)))
vtr <- VITTORIE %>%
ggplot(aes(x = tot, y = Vittorie, fill=c(high="skyblue2", low="#F17D7D"), width=0.95, height =2, text = paste("Vittorie:", Vittorie, "<br>","Percentuale:", percentuale, "%")))+  #factor(data) per permettere di inserire colori manualmente)
geom_col()+
theme(axis.title.x=element_blank(), #tre funzioni per eliminare titolo, segni e testo dalla linea delle ascisse (per inserimento immagini successivo)
axis.text.x =element_blank(),
axis.ticks.x=element_blank(),
)+
labs(
title="Numero di vittorie"
)+
scale_x_continuous(expand=c(0,0.75)) +
theme(
panel.grid.major = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(size = 0.1, linetype = 'solid',
colour = "grey"),
text=element_text(size=10,  family="Helvetica"),
legend.position = "none",
)
ggplotly(vtr, tooltip=("text"))
loldataset=read.csv("./10.16_LeagueOfLegends_Games.csv", sep=";")
View(loldataset)
loldataset2=read.csv("./riot_champion.csv" , sep=",")
View(loldataset2)
n<-dim(loldataset)[1]              #per eliminare ultima righa
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
loldataset2=read.csv("./riot_champion.csv" , sep=",")
loldataset=read.csv("./10.16_LeagueOfLegends_Games.csv", sep=";")
n<-dim(loldataset)[1]
loldataset<-loldataset[1:(n-1),]
imgs=file.path( ".", "champ" )
loldataset2 <- loldataset2 %>% mutate (Immagine = paste(imgs, image.full, sep = "/"))
library("dplyr")
library("magrittr")
library("knitr")
library("kableExtra")
library("tidyverse")
library("extrafont") #Ingnorare 40+ errori generati dalla libreria (developer comment)
library("ggplot2")
library("gapminder")
library("plyr")
library("plotly")
library("tidyverse")
library("htmlwidgets")
library("grid")
library("png")
library("ggimage")
library("patchwork")
library("cowplot")
library("ggridges")
library("scales")
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
loldataset2=read.csv("./riot_champion.csv" , sep=",")
loldataset=read.csv("./10.16_LeagueOfLegends_Games.csv", sep=";")
n<-dim(loldataset)[1]
loldataset<-loldataset[1:(n-1),]
imgs=file.path( ".", "champ" )
loldataset2 <- loldataset2 %>% mutate (Immagine = paste(imgs, image.full, sep = "/"))
